ng-template('#slides'='')
    tables-of-content-knn
    tables-of-content-knn([active]="knnLabels.DATA_SPECIFICATION")
    section
        slide-with-header(header="K-Nearest-Neighbors - Data Specification")
            ul
                li.fragment Was ist die #[span.highlight Ziel-Variable], z.B. #[span.code-font name]
                li.fragment Welche #[span.highlight Features] wählen wir, z.B. um eine Blume zu repräsentieren (#[span.code-font petal-length (cm), petal-width (cm), ...])
                li.fragment
                    data-specification-element-categorical-feature-encoded
                li.fragment
                    data-specification-element-numerical-feature-standardize
    tables-of-content-knn([active]="knnLabels.MODEL")
    section
        slide-with-header(header="K-Nearest-Neighbors - Intuition")
            ol
                li.fragment Wir lernen #[span.highlight keine Parameter (#[span(mathjax="<math><mi>β</mi></math>")])].
                li.fragment Wir suchen die nächsten #[span.highlight(mathjax="<math><mi>k</mi></math>")] Punkte im Train Set für Vorhersage.
    section
        slide-with-header(header="K-Nearest-Neighbors - Intuition")
            p Beispiel: #[span.highlight Blumenart] anhand 2 Features (#[span.code-font petal-length, petal-width]).
            .row
                .col-6
                    div.r-stack
                        img(src="assets/images/classification/k_nearest_neighbours/knn-example-data-only.png", data-fragment-index="0").fragment
                        img(src="assets/images/classification/k_nearest_neighbours/knn-example.png", data-fragment-index="2").fragment
                .col-6
                    .fragment(data-fragment-index="1") Als #[span.highlight Modell] suchen wir die nächsten #[span(mathjax="<math><mi>k</mi></math>")] Punkte im Train Set.
            div.d-flex.justify-content-center.fragment
                model-visualization
                    div(input, class="input").transparent-border-1.code
                        div petal-length (std): -1.25
                        div petal-width (std): -1.00
                    div(model, class="model").model-box.code
                        div([mathjax]="knn2D")
                    div(output, class="output").fix-height.code
                        | #[span.highlight-seaborn-1 Setosa]: 100%
    section
        slide-with-header(header="K-Nearest-Neighbors - Code")
            div.notebook-name k_nearest_neighbor.ipynb
            img.mt-5(src="assets/images/code.png")
    section
        slide-with-header(header="K-Nearest-Neighbors - Regression")
            ul
                li Kann auch für #[span.highlight Regression] eingesetz werden.
                li Einfach Labels (z.B. Kosten) von K-Nearest-Neighbors als Vorhersage #[span.highlight mitteln] (allenfalls noch gewichtet nach Distanz zum Nachbarn).
    section
        slide-with-header(header="K-Nearest-Neighbors - Summary")
            ul
                li #[span.highlight Kein Optimierung-Algorithmus]: "Nur" effizientes Abspeichern des Train-Sets (KD-Tree)
                li Bei vielen Features empirisch meistens #[span.highlight nicht gut]. #[br] Grund: #[a(href="https://en.wikipedia.org/wiki/Curse_of_dimensionality", target="_blank") Curse of Dimensionality]
                li Einfacher Algorithmus, wo man #[span.highlight kennen sollte].